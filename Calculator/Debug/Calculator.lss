
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000ce6  00000d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  000014f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105f  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ea  00000000  00000000  0000266f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090e  00000000  00000000  00002b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00003468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ec  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000be3  00000000  00000000  000039b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8a:	0c 94 71 06 	jmp	0xce2	; 0xce2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <charArrayToInt>:
	int i, value, r, flag;
	
	//flag = 1; for -ve numbers
	i = value = 0;
	
	for(i=0; i<n; i++)
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	16 16       	cp	r1, r22
  96:	17 06       	cpc	r1, r23
  98:	ec f4       	brge	.+58     	; 0xd4 <charArrayToInt+0x42>
  9a:	e8 2f       	mov	r30, r24
  9c:	f9 2f       	mov	r31, r25
int charArrayToInt(char *arr, char n)
{
	int i, value, r, flag;
	
	//flag = 1; for -ve numbers
	i = value = 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
	
	for(i=0; i<n; i++)
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
		 {
			 flag = -1;
			 continue;
		 }
		 */
		r = arr[i] - '0';
  a6:	a1 91       	ld	r26, Z+
		value = value * 10 + r; //increase a zero in the right then add the value
  a8:	9c 01       	movw	r18, r24
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	28 0f       	add	r18, r24
  bc:	39 1f       	adc	r19, r25
		 {
			 flag = -1;
			 continue;
		 }
		 */
		r = arr[i] - '0';
  be:	8a 2f       	mov	r24, r26
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	c0 97       	sbiw	r24, 0x30	; 48
		value = value * 10 + r; //increase a zero in the right then add the value
  c4:	82 0f       	add	r24, r18
  c6:	93 1f       	adc	r25, r19
	int i, value, r, flag;
	
	//flag = 1; for -ve numbers
	i = value = 0;
	
	for(i=0; i<n; i++)
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	5f 4f       	sbci	r21, 0xFF	; 255
  cc:	46 17       	cp	r20, r22
  ce:	57 07       	cpc	r21, r23
  d0:	54 f3       	brlt	.-44     	; 0xa6 <charArrayToInt+0x14>
  d2:	08 95       	ret
int charArrayToInt(char *arr, char n)
{
	int i, value, r, flag;
	
	//flag = 1; for -ve numbers
	i = value = 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
	
	//value = value * flag; // for -ve ops
	
	return value;
	
}
  d8:	08 95       	ret

000000da <operandtoInteger>:

int operandtoInteger(char *operand, char n)
{
	int returnval=0;
	char i=0;
	for(i=0;i<n;i++)
  da:	66 23       	and	r22, r22
  dc:	c9 f0       	breq	.+50     	; 0x110 <operandtoInteger+0x36>
  de:	e8 2f       	mov	r30, r24
  e0:	f9 2f       	mov	r31, r25
  e2:	40 e0       	ldi	r20, 0x00	; 0
	
}

int operandtoInteger(char *operand, char n)
{
	int returnval=0;
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
	char i=0;
	for(i=0;i<n;i++)
	{
		returnval = returnval*10 + ((*(operand+i))-'0');
  e8:	9c 01       	movw	r18, r24
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	28 0f       	add	r18, r24
  fc:	39 1f       	adc	r19, r25
  fe:	81 91       	ld	r24, Z+
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	c0 97       	sbiw	r24, 0x30	; 48
 104:	82 0f       	add	r24, r18
 106:	93 1f       	adc	r25, r19

int operandtoInteger(char *operand, char n)
{
	int returnval=0;
	char i=0;
	for(i=0;i<n;i++)
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	46 17       	cp	r20, r22
 10c:	69 f7       	brne	.-38     	; 0xe8 <operandtoInteger+0xe>
 10e:	08 95       	ret
	
}

int operandtoInteger(char *operand, char n)
{
	int returnval=0;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0;i<n;i++)
	{
		returnval = returnval*10 + ((*(operand+i))-'0');
	}
	return returnval;
}
 114:	08 95       	ret

00000116 <printInt>:


void printInt(int z)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	LCD_vSend_char((z/100)+48);
 11c:	64 e6       	ldi	r22, 0x64	; 100
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 4a 06 	call	0xc94	; 0xc94 <__divmodhi4>
 124:	86 2f       	mov	r24, r22
 126:	80 5d       	subi	r24, 0xD0	; 208
 128:	0e 94 f7 05 	call	0xbee	; 0xbee <LCD_vSend_char>
	LCD_vSend_char(((z/10)%10)+48);
 12c:	2a e0       	ldi	r18, 0x0A	; 10
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	ce 01       	movw	r24, r28
 132:	b9 01       	movw	r22, r18
 134:	0e 94 4a 06 	call	0xc94	; 0xc94 <__divmodhi4>
 138:	c8 2f       	mov	r28, r24
 13a:	cb 01       	movw	r24, r22
 13c:	b9 01       	movw	r22, r18
 13e:	0e 94 4a 06 	call	0xc94	; 0xc94 <__divmodhi4>
 142:	80 5d       	subi	r24, 0xD0	; 208
 144:	0e 94 f7 05 	call	0xbee	; 0xbee <LCD_vSend_char>
	LCD_vSend_char((z%10) + 48);
 148:	8c 2f       	mov	r24, r28
 14a:	80 5d       	subi	r24, 0xD0	; 208
 14c:	0e 94 f7 05 	call	0xbee	; 0xbee <LCD_vSend_char>
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <calcResult>:

int calcResult(int x, int y, char op)
{
	if(op=='+')
 156:	4b 32       	cpi	r20, 0x2B	; 43
 158:	21 f4       	brne	.+8      	; 0x162 <calcResult+0xc>
	{
		return x+y;
 15a:	9c 01       	movw	r18, r24
 15c:	26 0f       	add	r18, r22
 15e:	37 1f       	adc	r19, r23
 160:	13 c0       	rjmp	.+38     	; 0x188 <calcResult+0x32>
	}
	else if(op=='-')
 162:	4d 32       	cpi	r20, 0x2D	; 45
 164:	21 f4       	brne	.+8      	; 0x16e <calcResult+0x18>
	{
		return x-y;
 166:	9c 01       	movw	r18, r24
 168:	26 1b       	sub	r18, r22
 16a:	37 0b       	sbc	r19, r23
 16c:	0d c0       	rjmp	.+26     	; 0x188 <calcResult+0x32>
	}
	else if(op=='x')
 16e:	48 37       	cpi	r20, 0x78	; 120
 170:	41 f4       	brne	.+16     	; 0x182 <calcResult+0x2c>
	{
		return x*y;
 172:	86 9f       	mul	r24, r22
 174:	90 01       	movw	r18, r0
 176:	87 9f       	mul	r24, r23
 178:	30 0d       	add	r19, r0
 17a:	96 9f       	mul	r25, r22
 17c:	30 0d       	add	r19, r0
 17e:	11 24       	eor	r1, r1
 180:	03 c0       	rjmp	.+6      	; 0x188 <calcResult+0x32>
	}
	else if(op='/')
	{
		return x/y;
 182:	0e 94 4a 06 	call	0xc94	; 0xc94 <__divmodhi4>
 186:	9b 01       	movw	r18, r22
	}
	else
	{
		LCD_clearscreen();
	}
}
 188:	82 2f       	mov	r24, r18
 18a:	93 2f       	mov	r25, r19
 18c:	08 95       	ret

0000018e <main>:
int calcResult(int x, int y, char op);
void printInt(int z);
int readOperand(char *operand, char n);

int main(void)
{
 18e:	6f 92       	push	r6
 190:	7f 92       	push	r7
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	LCD_vInit();
 1a8:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_vInit>
	keypad_vInit();
 1ac:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <keypad_vInit>
	LCD_vSend_string("Hello, World");
 1b0:	80 e6       	ldi	r24, 0x60	; 96
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <LCD_vSend_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f e9       	ldi	r24, 0x9F	; 159
 1ba:	96 e8       	ldi	r25, 0x86	; 134
 1bc:	a1 e0       	ldi	r26, 0x01	; 1
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	a0 40       	sbci	r26, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x30>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x3a>
 1c8:	00 00       	nop
	_delay_ms(500);
	LCD_clearscreen();
 1ca:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_clearscreen>
	int *x = 0x600;
	int *y = 0x604;
	char *op = 0x650;
	char n=0;
	char f;
	char m=0;
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
	char *operand2 = 0x700;
	char inp=0xFF;
	int *x = 0x600;
	int *y = 0x604;
	char *op = 0x650;
	char n=0;
 1d0:	dd 24       	eor	r13, r13
	keypad_vInit();
	LCD_vSend_string("Hello, World");
	_delay_ms(500);
	LCD_clearscreen();
	char *operand1 = 0x800;
	char *operand2 = 0x700;
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	17 e0       	ldi	r17, 0x07	; 7
	LCD_vInit();
	keypad_vInit();
	LCD_vSend_string("Hello, World");
	_delay_ms(500);
	LCD_clearscreen();
	char *operand1 = 0x800;
 1d6:	ee 24       	eor	r14, r14
 1d8:	ff 24       	eor	r15, r15
 1da:	68 94       	set
 1dc:	f3 f8       	bld	r15, 3
				(*operand1) = inp;
				LCD_vSend_char(*operand1);
			}
			else
			{
				(*op) = inp;
 1de:	0f 2e       	mov	r0, r31
 1e0:	f0 e5       	ldi	r31, 0x50	; 80
 1e2:	af 2e       	mov	r10, r31
 1e4:	f6 e0       	ldi	r31, 0x06	; 6
 1e6:	bf 2e       	mov	r11, r31
 1e8:	f0 2d       	mov	r31, r0
			operand1++;
			n++;
			/*inp=='=' || inp =='A' || inp == 'x' || inp=='+' || inp=='-' || inp=='/'*/	
		}
		operand1 = operand1-n;
		(*x)=charArrayToInt(operand1,n);
 1ea:	0f 2e       	mov	r0, r31
 1ec:	88 24       	eor	r8, r8
 1ee:	f6 e0       	ldi	r31, 0x06	; 6
 1f0:	9f 2e       	mov	r9, r31
 1f2:	f0 2d       	mov	r31, r0
			}
			operand2++;
			m++;
		}
		operand2 = operand2-m;
		(*y)=charArrayToInt(operand2,m);
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f4 e0       	ldi	r31, 0x04	; 4
 1f8:	6f 2e       	mov	r6, r31
 1fa:	f6 e0       	ldi	r31, 0x06	; 6
 1fc:	7f 2e       	mov	r7, r31
 1fe:	f0 2d       	mov	r31, r0
		label:
		while(1)
		{
			do
			{
				inp=keypad_u8read();
 200:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <keypad_u8read>
 204:	c8 2f       	mov	r28, r24
			} while(inp==0xFF);
 206:	8f 3f       	cpi	r24, 0xFF	; 255
 208:	d9 f3       	breq	.-10     	; 0x200 <main+0x72>
 20a:	a3 e2       	ldi	r26, 0x23	; 35
 20c:	b4 ef       	ldi	r27, 0xF4	; 244
 20e:	11 97       	sbiw	r26, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0x80>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x86>
 214:	00 00       	nop
			_delay_ms(250);
			if(inp<='9' && inp>='0')
 216:	80 53       	subi	r24, 0x30	; 48
 218:	8a 30       	cpi	r24, 0x0A	; 10
 21a:	40 f4       	brcc	.+16     	; 0x22c <main+0x9e>
			{
				(*operand1) = inp;
 21c:	f7 01       	movw	r30, r14
 21e:	c1 93       	st	Z+, r28
 220:	7f 01       	movw	r14, r30
				LCD_vSend_char(*operand1);
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 f7 05 	call	0xbee	; 0xbee <LCD_vSend_char>
			{
				(*op) = inp;
				break;
			}
			operand1++;
			n++;
 228:	d3 94       	inc	r13
			/*inp=='=' || inp =='A' || inp == 'x' || inp=='+' || inp=='-' || inp=='/'*/	
		}
 22a:	ea cf       	rjmp	.-44     	; 0x200 <main+0x72>
				(*operand1) = inp;
				LCD_vSend_char(*operand1);
			}
			else
			{
				(*op) = inp;
 22c:	d5 01       	movw	r26, r10
 22e:	cc 93       	st	X, r28
			}
			operand1++;
			n++;
			/*inp=='=' || inp =='A' || inp == 'x' || inp=='+' || inp=='-' || inp=='/'*/	
		}
		operand1 = operand1-n;
 230:	ed 18       	sub	r14, r13
 232:	f1 08       	sbc	r15, r1
		(*x)=charArrayToInt(operand1,n);
 234:	c7 01       	movw	r24, r14
 236:	6d 2d       	mov	r22, r13
 238:	0e 94 49 00 	call	0x92	; 0x92 <charArrayToInt>
 23c:	f4 01       	movw	r30, r8
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
		if(op=='A')
		{
			LCD_clearscreen; 
			goto label;
		}			
		LCD_vSend_char((*op));
 242:	8c 2f       	mov	r24, r28
 244:	0e 94 f7 05 	call	0xbee	; 0xbee <LCD_vSend_char>
		
		while(1)
		{
			do
			{
				inp=keypad_u8read();
 248:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <keypad_u8read>
 24c:	c8 2f       	mov	r28, r24
			} while(inp==0xFF);
 24e:	8f 3f       	cpi	r24, 0xFF	; 255
 250:	d9 f3       	breq	.-10     	; 0x248 <main+0xba>
 252:	83 e2       	ldi	r24, 0x23	; 35
 254:	94 ef       	ldi	r25, 0xF4	; 244
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0xc8>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0xce>
 25c:	00 00       	nop
			_delay_ms(250);
			if(inp<='9' && inp>='0')
 25e:	8c 2f       	mov	r24, r28
 260:	80 53       	subi	r24, 0x30	; 48
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	40 f4       	brcc	.+16     	; 0x276 <main+0xe8>
			{
				(*operand2) = inp;
 266:	d8 01       	movw	r26, r16
 268:	cd 93       	st	X+, r28
 26a:	8d 01       	movw	r16, r26
				LCD_vSend_char(*operand2);
 26c:	8c 2f       	mov	r24, r28
 26e:	0e 94 f7 05 	call	0xbee	; 0xbee <LCD_vSend_char>
			{
				f = inp;
				break;
			}
			operand2++;
			m++;
 272:	df 5f       	subi	r29, 0xFF	; 255
		}
 274:	e9 cf       	rjmp	.-46     	; 0x248 <main+0xba>
		operand2 = operand2-m;
 276:	0d 1b       	sub	r16, r29
 278:	11 09       	sbc	r17, r1
		(*y)=charArrayToInt(operand2,m);
 27a:	c8 01       	movw	r24, r16
 27c:	6d 2f       	mov	r22, r29
 27e:	0e 94 49 00 	call	0x92	; 0x92 <charArrayToInt>
 282:	f3 01       	movw	r30, r6
 284:	91 83       	std	Z+1, r25	; 0x01
 286:	80 83       	st	Z, r24
		
		
		if(f=='=')
 288:	cd 33       	cpi	r28, 0x3D	; 61
 28a:	b9 f4       	brne	.+46     	; 0x2ba <main+0x12c>
		{
			LCD_movecursor(2,13);
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	6d e0       	ldi	r22, 0x0D	; 13
 290:	0e 94 36 06 	call	0xc6c	; 0xc6c <LCD_movecursor>
			result = calcResult((*x),(*y),(*op));
 294:	60 91 04 06 	lds	r22, 0x0604
 298:	70 91 05 06 	lds	r23, 0x0605
 29c:	80 91 00 06 	lds	r24, 0x0600
 2a0:	90 91 01 06 	lds	r25, 0x0601
 2a4:	40 91 50 06 	lds	r20, 0x0650
 2a8:	0e 94 ab 00 	call	0x156	; 0x156 <calcResult>
			printInt(result);
 2ac:	0e 94 8b 00 	call	0x116	; 0x116 <printInt>
			while(keypad_u8read()==0xFF);
 2b0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <keypad_u8read>
 2b4:	8f 3f       	cpi	r24, 0xFF	; 255
 2b6:	e1 f3       	breq	.-8      	; 0x2b0 <main+0x122>
 2b8:	1c c0       	rjmp	.+56     	; 0x2f2 <main+0x164>
			break;
		}
		else if(f=='A')
 2ba:	c1 34       	cpi	r28, 0x41	; 65
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <main+0x136>
		{
			LCD_clearscreen();
 2be:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_clearscreen>
			goto label;
 2c2:	9e cf       	rjmp	.-196    	; 0x200 <main+0x72>
		}
		else
		{
			LCD_clearscreen();
 2c4:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_clearscreen>
			LCD_vSend_string("Only 2 Operands");
 2c8:	8d e6       	ldi	r24, 0x6D	; 109
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <LCD_vSend_string>
			LCD_movecursor(2,1);
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	0e 94 36 06 	call	0xc6c	; 0xc6c <LCD_movecursor>
			LCD_vSend_string("Allowed !!");
 2d8:	8d e7       	ldi	r24, 0x7D	; 125
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <LCD_vSend_string>
 2e0:	8f ed       	ldi	r24, 0xDF	; 223
 2e2:	93 e9       	ldi	r25, 0x93	; 147
 2e4:	a4 e0       	ldi	r26, 0x04	; 4
 2e6:	81 50       	subi	r24, 0x01	; 1
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	a0 40       	sbci	r26, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x158>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x162>
 2f0:	00 00       	nop
			_delay_ms(1500);
			break;
		}
	}
	LCD_clearscreen();
 2f2:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_clearscreen>
	LCD_vSend_string("Bye Bye !");
 2f6:	88 e8       	ldi	r24, 0x88	; 136
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 1d 06 	call	0xc3a	; 0xc3a <LCD_vSend_string>
}	
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	bf 90       	pop	r11
 312:	af 90       	pop	r10
 314:	9f 90       	pop	r9
 316:	8f 90       	pop	r8
 318:	7f 90       	pop	r7
 31a:	6f 90       	pop	r6
 31c:	08 95       	ret

0000031e <DIO_vSetPinDir>:
#include "std_macros.h"
#include <avr/io.h>

void DIO_vSetPinDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 31e:	84 34       	cpi	r24, 0x44	; 68
 320:	09 f4       	brne	.+2      	; 0x324 <DIO_vSetPinDir+0x6>
 322:	71 c0       	rjmp	.+226    	; 0x406 <DIO_vSetPinDir+0xe8>
 324:	85 34       	cpi	r24, 0x45	; 69
 326:	48 f4       	brcc	.+18     	; 0x33a <DIO_vSetPinDir+0x1c>
 328:	82 34       	cpi	r24, 0x42	; 66
 32a:	99 f1       	breq	.+102    	; 0x392 <DIO_vSetPinDir+0x74>
 32c:	83 34       	cpi	r24, 0x43	; 67
 32e:	08 f0       	brcs	.+2      	; 0x332 <DIO_vSetPinDir+0x14>
 330:	4d c0       	rjmp	.+154    	; 0x3cc <DIO_vSetPinDir+0xae>
 332:	81 34       	cpi	r24, 0x41	; 65
 334:	09 f0       	breq	.+2      	; 0x338 <DIO_vSetPinDir+0x1a>
 336:	83 c0       	rjmp	.+262    	; 0x43e <DIO_vSetPinDir+0x120>
 338:	0f c0       	rjmp	.+30     	; 0x358 <DIO_vSetPinDir+0x3a>
 33a:	82 36       	cpi	r24, 0x62	; 98
 33c:	51 f1       	breq	.+84     	; 0x392 <DIO_vSetPinDir+0x74>
 33e:	83 36       	cpi	r24, 0x63	; 99
 340:	20 f4       	brcc	.+8      	; 0x34a <DIO_vSetPinDir+0x2c>
 342:	81 36       	cpi	r24, 0x61	; 97
 344:	09 f0       	breq	.+2      	; 0x348 <DIO_vSetPinDir+0x2a>
 346:	7b c0       	rjmp	.+246    	; 0x43e <DIO_vSetPinDir+0x120>
 348:	07 c0       	rjmp	.+14     	; 0x358 <DIO_vSetPinDir+0x3a>
 34a:	83 36       	cpi	r24, 0x63	; 99
 34c:	09 f4       	brne	.+2      	; 0x350 <DIO_vSetPinDir+0x32>
 34e:	3e c0       	rjmp	.+124    	; 0x3cc <DIO_vSetPinDir+0xae>
 350:	84 36       	cpi	r24, 0x64	; 100
 352:	09 f0       	breq	.+2      	; 0x356 <DIO_vSetPinDir+0x38>
 354:	74 c0       	rjmp	.+232    	; 0x43e <DIO_vSetPinDir+0x120>
 356:	57 c0       	rjmp	.+174    	; 0x406 <DIO_vSetPinDir+0xe8>
	{
		case 'A':
		case 'a':
		{
			if(direction==1) SET_BIT(DDRA,pinnumber);
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	69 f4       	brne	.+26     	; 0x376 <DIO_vSetPinDir+0x58>
 35c:	2a b3       	in	r18, 0x1a	; 26
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_vSetPinDir+0x4c>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_vSetPinDir+0x48>
 36e:	ba 01       	movw	r22, r20
 370:	62 2b       	or	r22, r18
 372:	6a bb       	out	0x1a, r22	; 26
 374:	08 95       	ret
			else CLR_BIT(DDRA,pinnumber);
 376:	2a b3       	in	r18, 0x1a	; 26
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	ac 01       	movw	r20, r24
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_vSetPinDir+0x66>
 380:	44 0f       	add	r20, r20
 382:	55 1f       	adc	r21, r21
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_vSetPinDir+0x62>
 388:	ba 01       	movw	r22, r20
 38a:	60 95       	com	r22
 38c:	62 23       	and	r22, r18
 38e:	6a bb       	out	0x1a, r22	; 26
 390:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			if(direction==1) SET_BIT(DDRB,pinnumber);
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	69 f4       	brne	.+26     	; 0x3b0 <DIO_vSetPinDir+0x92>
 396:	27 b3       	in	r18, 0x17	; 23
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	ac 01       	movw	r20, r24
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_vSetPinDir+0x86>
 3a0:	44 0f       	add	r20, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_vSetPinDir+0x82>
 3a8:	ba 01       	movw	r22, r20
 3aa:	62 2b       	or	r22, r18
 3ac:	67 bb       	out	0x17, r22	; 23
 3ae:	08 95       	ret
			else CLR_BIT(DDRB,pinnumber);
 3b0:	27 b3       	in	r18, 0x17	; 23
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	ac 01       	movw	r20, r24
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_vSetPinDir+0xa0>
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_vSetPinDir+0x9c>
 3c2:	ba 01       	movw	r22, r20
 3c4:	60 95       	com	r22
 3c6:	62 23       	and	r22, r18
 3c8:	67 bb       	out	0x17, r22	; 23
 3ca:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			if(direction==1) SET_BIT(DDRC,pinnumber);
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	69 f4       	brne	.+26     	; 0x3ea <DIO_vSetPinDir+0xcc>
 3d0:	24 b3       	in	r18, 0x14	; 20
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	ac 01       	movw	r20, r24
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_vSetPinDir+0xc0>
 3da:	44 0f       	add	r20, r20
 3dc:	55 1f       	adc	r21, r21
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_vSetPinDir+0xbc>
 3e2:	ba 01       	movw	r22, r20
 3e4:	62 2b       	or	r22, r18
 3e6:	64 bb       	out	0x14, r22	; 20
 3e8:	08 95       	ret
			else CLR_BIT(DDRC,pinnumber);
 3ea:	24 b3       	in	r18, 0x14	; 20
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_vSetPinDir+0xda>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_vSetPinDir+0xd6>
 3fc:	ba 01       	movw	r22, r20
 3fe:	60 95       	com	r22
 400:	62 23       	and	r22, r18
 402:	64 bb       	out	0x14, r22	; 20
 404:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			if(direction==1) SET_BIT(DDRD,pinnumber);
 406:	41 30       	cpi	r20, 0x01	; 1
 408:	69 f4       	brne	.+26     	; 0x424 <DIO_vSetPinDir+0x106>
 40a:	21 b3       	in	r18, 0x11	; 17
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	ac 01       	movw	r20, r24
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_vSetPinDir+0xfa>
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_vSetPinDir+0xf6>
 41c:	ba 01       	movw	r22, r20
 41e:	62 2b       	or	r22, r18
 420:	61 bb       	out	0x11, r22	; 17
 422:	08 95       	ret
			else CLR_BIT(DDRD,pinnumber);
 424:	21 b3       	in	r18, 0x11	; 17
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	ac 01       	movw	r20, r24
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_vSetPinDir+0x114>
 42e:	44 0f       	add	r20, r20
 430:	55 1f       	adc	r21, r21
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_vSetPinDir+0x110>
 436:	ba 01       	movw	r22, r20
 438:	60 95       	com	r22
 43a:	62 23       	and	r22, r18
 43c:	61 bb       	out	0x11, r22	; 17
 43e:	08 95       	ret

00000440 <DIO_vWrite>:
	}
}

void DIO_vWrite(unsigned char portname, unsigned char pinnumber, unsigned char val)
{
	switch(portname)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	09 f4       	brne	.+2      	; 0x446 <DIO_vWrite+0x6>
 444:	71 c0       	rjmp	.+226    	; 0x528 <DIO_vWrite+0xe8>
 446:	85 34       	cpi	r24, 0x45	; 69
 448:	48 f4       	brcc	.+18     	; 0x45c <DIO_vWrite+0x1c>
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	99 f1       	breq	.+102    	; 0x4b4 <DIO_vWrite+0x74>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	08 f0       	brcs	.+2      	; 0x454 <DIO_vWrite+0x14>
 452:	4d c0       	rjmp	.+154    	; 0x4ee <DIO_vWrite+0xae>
 454:	81 34       	cpi	r24, 0x41	; 65
 456:	09 f0       	breq	.+2      	; 0x45a <DIO_vWrite+0x1a>
 458:	83 c0       	rjmp	.+262    	; 0x560 <DIO_vWrite+0x120>
 45a:	0f c0       	rjmp	.+30     	; 0x47a <DIO_vWrite+0x3a>
 45c:	82 36       	cpi	r24, 0x62	; 98
 45e:	51 f1       	breq	.+84     	; 0x4b4 <DIO_vWrite+0x74>
 460:	83 36       	cpi	r24, 0x63	; 99
 462:	20 f4       	brcc	.+8      	; 0x46c <DIO_vWrite+0x2c>
 464:	81 36       	cpi	r24, 0x61	; 97
 466:	09 f0       	breq	.+2      	; 0x46a <DIO_vWrite+0x2a>
 468:	7b c0       	rjmp	.+246    	; 0x560 <DIO_vWrite+0x120>
 46a:	07 c0       	rjmp	.+14     	; 0x47a <DIO_vWrite+0x3a>
 46c:	83 36       	cpi	r24, 0x63	; 99
 46e:	09 f4       	brne	.+2      	; 0x472 <DIO_vWrite+0x32>
 470:	3e c0       	rjmp	.+124    	; 0x4ee <DIO_vWrite+0xae>
 472:	84 36       	cpi	r24, 0x64	; 100
 474:	09 f0       	breq	.+2      	; 0x478 <DIO_vWrite+0x38>
 476:	74 c0       	rjmp	.+232    	; 0x560 <DIO_vWrite+0x120>
 478:	57 c0       	rjmp	.+174    	; 0x528 <DIO_vWrite+0xe8>
	{
		case 'A':
		case 'a':
		{
			if(val==1) SET_BIT(PORTA,pinnumber);
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	69 f4       	brne	.+26     	; 0x498 <DIO_vWrite+0x58>
 47e:	2b b3       	in	r18, 0x1b	; 27
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	ac 01       	movw	r20, r24
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_vWrite+0x4c>
 488:	44 0f       	add	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_vWrite+0x48>
 490:	ba 01       	movw	r22, r20
 492:	62 2b       	or	r22, r18
 494:	6b bb       	out	0x1b, r22	; 27
 496:	08 95       	ret
			else CLR_BIT(PORTA,pinnumber);
 498:	2b b3       	in	r18, 0x1b	; 27
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	ac 01       	movw	r20, r24
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_vWrite+0x66>
 4a2:	44 0f       	add	r20, r20
 4a4:	55 1f       	adc	r21, r21
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_vWrite+0x62>
 4aa:	ba 01       	movw	r22, r20
 4ac:	60 95       	com	r22
 4ae:	62 23       	and	r22, r18
 4b0:	6b bb       	out	0x1b, r22	; 27
 4b2:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			if(val==1) SET_BIT(PORTB,pinnumber);
 4b4:	41 30       	cpi	r20, 0x01	; 1
 4b6:	69 f4       	brne	.+26     	; 0x4d2 <DIO_vWrite+0x92>
 4b8:	28 b3       	in	r18, 0x18	; 24
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	ac 01       	movw	r20, r24
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_vWrite+0x86>
 4c2:	44 0f       	add	r20, r20
 4c4:	55 1f       	adc	r21, r21
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_vWrite+0x82>
 4ca:	ba 01       	movw	r22, r20
 4cc:	62 2b       	or	r22, r18
 4ce:	68 bb       	out	0x18, r22	; 24
 4d0:	08 95       	ret
			else CLR_BIT(PORTB,pinnumber);
 4d2:	28 b3       	in	r18, 0x18	; 24
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	ac 01       	movw	r20, r24
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_vWrite+0xa0>
 4dc:	44 0f       	add	r20, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_vWrite+0x9c>
 4e4:	ba 01       	movw	r22, r20
 4e6:	60 95       	com	r22
 4e8:	62 23       	and	r22, r18
 4ea:	68 bb       	out	0x18, r22	; 24
 4ec:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			if(val==1) SET_BIT(PORTC,pinnumber);
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	69 f4       	brne	.+26     	; 0x50c <DIO_vWrite+0xcc>
 4f2:	25 b3       	in	r18, 0x15	; 21
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	ac 01       	movw	r20, r24
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_vWrite+0xc0>
 4fc:	44 0f       	add	r20, r20
 4fe:	55 1f       	adc	r21, r21
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_vWrite+0xbc>
 504:	ba 01       	movw	r22, r20
 506:	62 2b       	or	r22, r18
 508:	65 bb       	out	0x15, r22	; 21
 50a:	08 95       	ret
			else CLR_BIT(PORTC,pinnumber);
 50c:	25 b3       	in	r18, 0x15	; 21
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	ac 01       	movw	r20, r24
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_vWrite+0xda>
 516:	44 0f       	add	r20, r20
 518:	55 1f       	adc	r21, r21
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_vWrite+0xd6>
 51e:	ba 01       	movw	r22, r20
 520:	60 95       	com	r22
 522:	62 23       	and	r22, r18
 524:	65 bb       	out	0x15, r22	; 21
 526:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			if(val==1) SET_BIT(PORTD,pinnumber);
 528:	41 30       	cpi	r20, 0x01	; 1
 52a:	69 f4       	brne	.+26     	; 0x546 <DIO_vWrite+0x106>
 52c:	22 b3       	in	r18, 0x12	; 18
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	ac 01       	movw	r20, r24
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_vWrite+0xfa>
 536:	44 0f       	add	r20, r20
 538:	55 1f       	adc	r21, r21
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_vWrite+0xf6>
 53e:	ba 01       	movw	r22, r20
 540:	62 2b       	or	r22, r18
 542:	62 bb       	out	0x12, r22	; 18
 544:	08 95       	ret
			else CLR_BIT(PORTD,pinnumber);
 546:	22 b3       	in	r18, 0x12	; 18
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	ac 01       	movw	r20, r24
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_vWrite+0x114>
 550:	44 0f       	add	r20, r20
 552:	55 1f       	adc	r21, r21
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_vWrite+0x110>
 558:	ba 01       	movw	r22, r20
 55a:	60 95       	com	r22
 55c:	62 23       	and	r22, r18
 55e:	62 bb       	out	0x12, r22	; 18
 560:	08 95       	ret

00000562 <DIO_vToggle>:
	}
}

void DIO_vToggle(unsigned char portname, unsigned char pinnumber)
{
	switch(portname)
 562:	84 34       	cpi	r24, 0x44	; 68
 564:	09 f4       	brne	.+2      	; 0x568 <DIO_vToggle+0x6>
 566:	3d c0       	rjmp	.+122    	; 0x5e2 <DIO_vToggle+0x80>
 568:	85 34       	cpi	r24, 0x45	; 69
 56a:	40 f4       	brcc	.+16     	; 0x57c <DIO_vToggle+0x1a>
 56c:	82 34       	cpi	r24, 0x42	; 66
 56e:	f9 f0       	breq	.+62     	; 0x5ae <DIO_vToggle+0x4c>
 570:	83 34       	cpi	r24, 0x43	; 67
 572:	50 f5       	brcc	.+84     	; 0x5c8 <DIO_vToggle+0x66>
 574:	81 34       	cpi	r24, 0x41	; 65
 576:	09 f0       	breq	.+2      	; 0x57a <DIO_vToggle+0x18>
 578:	40 c0       	rjmp	.+128    	; 0x5fa <DIO_vToggle+0x98>
 57a:	0c c0       	rjmp	.+24     	; 0x594 <DIO_vToggle+0x32>
 57c:	82 36       	cpi	r24, 0x62	; 98
 57e:	b9 f0       	breq	.+46     	; 0x5ae <DIO_vToggle+0x4c>
 580:	83 36       	cpi	r24, 0x63	; 99
 582:	18 f4       	brcc	.+6      	; 0x58a <DIO_vToggle+0x28>
 584:	81 36       	cpi	r24, 0x61	; 97
 586:	c9 f5       	brne	.+114    	; 0x5fa <DIO_vToggle+0x98>
 588:	05 c0       	rjmp	.+10     	; 0x594 <DIO_vToggle+0x32>
 58a:	83 36       	cpi	r24, 0x63	; 99
 58c:	e9 f0       	breq	.+58     	; 0x5c8 <DIO_vToggle+0x66>
 58e:	84 36       	cpi	r24, 0x64	; 100
 590:	a1 f5       	brne	.+104    	; 0x5fa <DIO_vToggle+0x98>
 592:	27 c0       	rjmp	.+78     	; 0x5e2 <DIO_vToggle+0x80>
	{
		case 'A':
		case 'a':
		{
			TOG_BIT(PORTA,pinnumber);
 594:	2b b3       	in	r18, 0x1b	; 27
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	ac 01       	movw	r20, r24
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_vToggle+0x40>
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_vToggle+0x3c>
 5a6:	ba 01       	movw	r22, r20
 5a8:	62 27       	eor	r22, r18
 5aa:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 5ac:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			TOG_BIT(PORTB,pinnumber);
 5ae:	28 b3       	in	r18, 0x18	; 24
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	ac 01       	movw	r20, r24
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_vToggle+0x5a>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_vToggle+0x56>
 5c0:	ba 01       	movw	r22, r20
 5c2:	62 27       	eor	r22, r18
 5c4:	68 bb       	out	0x18, r22	; 24
		}
		break;
 5c6:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			TOG_BIT(PORTC,pinnumber);
 5c8:	25 b3       	in	r18, 0x15	; 21
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_vToggle+0x74>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_vToggle+0x70>
 5da:	ba 01       	movw	r22, r20
 5dc:	62 27       	eor	r22, r18
 5de:	65 bb       	out	0x15, r22	; 21
		}
		break;
 5e0:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			TOG_BIT(PORTD,pinnumber);
 5e2:	22 b3       	in	r18, 0x12	; 18
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	ac 01       	movw	r20, r24
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_vToggle+0x8e>
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_vToggle+0x8a>
 5f4:	ba 01       	movw	r22, r20
 5f6:	62 27       	eor	r22, r18
 5f8:	62 bb       	out	0x12, r22	; 18
 5fa:	08 95       	ret

000005fc <DIO_u8read>:
	}
}

unsigned char DIO_u8read(unsigned char portname, unsigned char pinnumber)
{
	switch(portname)
 5fc:	84 34       	cpi	r24, 0x44	; 68
 5fe:	09 f4       	brne	.+2      	; 0x602 <DIO_u8read+0x6>
 600:	4e c0       	rjmp	.+156    	; 0x69e <DIO_u8read+0xa2>
 602:	85 34       	cpi	r24, 0x45	; 69
 604:	40 f4       	brcc	.+16     	; 0x616 <DIO_u8read+0x1a>
 606:	82 34       	cpi	r24, 0x42	; 66
 608:	31 f1       	breq	.+76     	; 0x656 <DIO_u8read+0x5a>
 60a:	83 34       	cpi	r24, 0x43	; 67
 60c:	b0 f5       	brcc	.+108    	; 0x67a <DIO_u8read+0x7e>
 60e:	81 34       	cpi	r24, 0x41	; 65
 610:	09 f0       	breq	.+2      	; 0x614 <DIO_u8read+0x18>
 612:	57 c0       	rjmp	.+174    	; 0x6c2 <DIO_u8read+0xc6>
 614:	0e c0       	rjmp	.+28     	; 0x632 <DIO_u8read+0x36>
 616:	82 36       	cpi	r24, 0x62	; 98
 618:	f1 f0       	breq	.+60     	; 0x656 <DIO_u8read+0x5a>
 61a:	83 36       	cpi	r24, 0x63	; 99
 61c:	20 f4       	brcc	.+8      	; 0x626 <DIO_u8read+0x2a>
 61e:	81 36       	cpi	r24, 0x61	; 97
 620:	09 f0       	breq	.+2      	; 0x624 <DIO_u8read+0x28>
 622:	4f c0       	rjmp	.+158    	; 0x6c2 <DIO_u8read+0xc6>
 624:	06 c0       	rjmp	.+12     	; 0x632 <DIO_u8read+0x36>
 626:	83 36       	cpi	r24, 0x63	; 99
 628:	41 f1       	breq	.+80     	; 0x67a <DIO_u8read+0x7e>
 62a:	84 36       	cpi	r24, 0x64	; 100
 62c:	09 f0       	breq	.+2      	; 0x630 <DIO_u8read+0x34>
 62e:	49 c0       	rjmp	.+146    	; 0x6c2 <DIO_u8read+0xc6>
 630:	36 c0       	rjmp	.+108    	; 0x69e <DIO_u8read+0xa2>
	{
		case 'A':
		case 'a':
		{
			return READ_BIT(PINA,pinnumber);
 632:	29 b3       	in	r18, 0x19	; 25
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	06 2e       	mov	r0, r22
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_u8read+0x44>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	0a 94       	dec	r0
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_u8read+0x40>
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	82 23       	and	r24, r18
 648:	93 23       	and	r25, r19
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_u8read+0x54>
 64c:	95 95       	asr	r25
 64e:	87 95       	ror	r24
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_u8read+0x50>
 654:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			return READ_BIT(PINB,pinnumber);
 656:	26 b3       	in	r18, 0x16	; 22
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	06 2e       	mov	r0, r22
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_u8read+0x68>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	0a 94       	dec	r0
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_u8read+0x64>
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	82 23       	and	r24, r18
 66c:	93 23       	and	r25, r19
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_u8read+0x78>
 670:	95 95       	asr	r25
 672:	87 95       	ror	r24
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_u8read+0x74>
 678:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			return READ_BIT(PINC,pinnumber);
 67a:	23 b3       	in	r18, 0x13	; 19
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	06 2e       	mov	r0, r22
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_u8read+0x8c>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	0a 94       	dec	r0
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_u8read+0x88>
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	82 23       	and	r24, r18
 690:	93 23       	and	r25, r19
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_u8read+0x9c>
 694:	95 95       	asr	r25
 696:	87 95       	ror	r24
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_u8read+0x98>
 69c:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			return READ_BIT(PIND,pinnumber);
 69e:	20 b3       	in	r18, 0x10	; 16
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	06 2e       	mov	r0, r22
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_u8read+0xb0>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	0a 94       	dec	r0
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_u8read+0xac>
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	82 23       	and	r24, r18
 6b4:	93 23       	and	r25, r19
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_u8read+0xc0>
 6b8:	95 95       	asr	r25
 6ba:	87 95       	ror	r24
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_u8read+0xbc>
 6c0:	08 95       	ret
		}
		break;
	}
}
 6c2:	08 95       	ret

000006c4 <DIO_vSETPORTDir>:

void DIO_vSETPORTDir(unsigned char portname, unsigned char direction)
{
	switch(portname)
 6c4:	84 34       	cpi	r24, 0x44	; 68
 6c6:	d9 f0       	breq	.+54     	; 0x6fe <DIO_vSETPORTDir+0x3a>
 6c8:	85 34       	cpi	r24, 0x45	; 69
 6ca:	38 f4       	brcc	.+14     	; 0x6da <DIO_vSETPORTDir+0x16>
 6cc:	82 34       	cpi	r24, 0x42	; 66
 6ce:	99 f0       	breq	.+38     	; 0x6f6 <DIO_vSETPORTDir+0x32>
 6d0:	83 34       	cpi	r24, 0x43	; 67
 6d2:	98 f4       	brcc	.+38     	; 0x6fa <DIO_vSETPORTDir+0x36>
 6d4:	81 34       	cpi	r24, 0x41	; 65
 6d6:	a1 f4       	brne	.+40     	; 0x700 <DIO_vSETPORTDir+0x3c>
 6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <DIO_vSETPORTDir+0x2e>
 6da:	82 36       	cpi	r24, 0x62	; 98
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <DIO_vSETPORTDir+0x32>
 6de:	83 36       	cpi	r24, 0x63	; 99
 6e0:	18 f4       	brcc	.+6      	; 0x6e8 <DIO_vSETPORTDir+0x24>
 6e2:	81 36       	cpi	r24, 0x61	; 97
 6e4:	69 f4       	brne	.+26     	; 0x700 <DIO_vSETPORTDir+0x3c>
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <DIO_vSETPORTDir+0x2e>
 6e8:	83 36       	cpi	r24, 0x63	; 99
 6ea:	39 f0       	breq	.+14     	; 0x6fa <DIO_vSETPORTDir+0x36>
 6ec:	84 36       	cpi	r24, 0x64	; 100
 6ee:	41 f4       	brne	.+16     	; 0x700 <DIO_vSETPORTDir+0x3c>
 6f0:	06 c0       	rjmp	.+12     	; 0x6fe <DIO_vSETPORTDir+0x3a>
	{
		case 'A':
		case 'a':
		{
			DDRA = direction;
 6f2:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 6f4:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			DDRB=direction;
 6f6:	67 bb       	out	0x17, r22	; 23
		}
		break;
 6f8:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			DDRC=direction;
 6fa:	64 bb       	out	0x14, r22	; 20
		}
		break;
 6fc:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			DDRD=direction;
 6fe:	61 bb       	out	0x11, r22	; 17
 700:	08 95       	ret

00000702 <DIO_vWritePORT>:
	}
}

void DIO_vWritePORT(unsigned char portname, unsigned char val)
{
	switch(portname)
 702:	84 34       	cpi	r24, 0x44	; 68
 704:	d9 f0       	breq	.+54     	; 0x73c <DIO_vWritePORT+0x3a>
 706:	85 34       	cpi	r24, 0x45	; 69
 708:	38 f4       	brcc	.+14     	; 0x718 <DIO_vWritePORT+0x16>
 70a:	82 34       	cpi	r24, 0x42	; 66
 70c:	99 f0       	breq	.+38     	; 0x734 <DIO_vWritePORT+0x32>
 70e:	83 34       	cpi	r24, 0x43	; 67
 710:	98 f4       	brcc	.+38     	; 0x738 <DIO_vWritePORT+0x36>
 712:	81 34       	cpi	r24, 0x41	; 65
 714:	a1 f4       	brne	.+40     	; 0x73e <DIO_vWritePORT+0x3c>
 716:	0c c0       	rjmp	.+24     	; 0x730 <DIO_vWritePORT+0x2e>
 718:	82 36       	cpi	r24, 0x62	; 98
 71a:	61 f0       	breq	.+24     	; 0x734 <DIO_vWritePORT+0x32>
 71c:	83 36       	cpi	r24, 0x63	; 99
 71e:	18 f4       	brcc	.+6      	; 0x726 <DIO_vWritePORT+0x24>
 720:	81 36       	cpi	r24, 0x61	; 97
 722:	69 f4       	brne	.+26     	; 0x73e <DIO_vWritePORT+0x3c>
 724:	05 c0       	rjmp	.+10     	; 0x730 <DIO_vWritePORT+0x2e>
 726:	83 36       	cpi	r24, 0x63	; 99
 728:	39 f0       	breq	.+14     	; 0x738 <DIO_vWritePORT+0x36>
 72a:	84 36       	cpi	r24, 0x64	; 100
 72c:	41 f4       	brne	.+16     	; 0x73e <DIO_vWritePORT+0x3c>
 72e:	06 c0       	rjmp	.+12     	; 0x73c <DIO_vWritePORT+0x3a>
	{
		case 'A':
		case 'a':
		{
			PORTA=val;
 730:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 732:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB=val;
 734:	68 bb       	out	0x18, r22	; 24
		}
		break;
 736:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC=val;
 738:	65 bb       	out	0x15, r22	; 21
		}
		break;
 73a:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD=val;
 73c:	62 bb       	out	0x12, r22	; 18
 73e:	08 95       	ret

00000740 <DIO_vTOGPORT>:
	}
}

void DIO_vTOGPORT(unsigned char portname)
{
	switch(portname)
 740:	84 34       	cpi	r24, 0x44	; 68
 742:	09 f1       	breq	.+66     	; 0x786 <DIO_vTOGPORT+0x46>
 744:	85 34       	cpi	r24, 0x45	; 69
 746:	38 f4       	brcc	.+14     	; 0x756 <DIO_vTOGPORT+0x16>
 748:	82 34       	cpi	r24, 0x42	; 66
 74a:	a9 f0       	breq	.+42     	; 0x776 <DIO_vTOGPORT+0x36>
 74c:	83 34       	cpi	r24, 0x43	; 67
 74e:	b8 f4       	brcc	.+46     	; 0x77e <DIO_vTOGPORT+0x3e>
 750:	81 34       	cpi	r24, 0x41	; 65
 752:	e1 f4       	brne	.+56     	; 0x78c <DIO_vTOGPORT+0x4c>
 754:	0c c0       	rjmp	.+24     	; 0x76e <DIO_vTOGPORT+0x2e>
 756:	82 36       	cpi	r24, 0x62	; 98
 758:	71 f0       	breq	.+28     	; 0x776 <DIO_vTOGPORT+0x36>
 75a:	83 36       	cpi	r24, 0x63	; 99
 75c:	18 f4       	brcc	.+6      	; 0x764 <DIO_vTOGPORT+0x24>
 75e:	81 36       	cpi	r24, 0x61	; 97
 760:	a9 f4       	brne	.+42     	; 0x78c <DIO_vTOGPORT+0x4c>
 762:	05 c0       	rjmp	.+10     	; 0x76e <DIO_vTOGPORT+0x2e>
 764:	83 36       	cpi	r24, 0x63	; 99
 766:	59 f0       	breq	.+22     	; 0x77e <DIO_vTOGPORT+0x3e>
 768:	84 36       	cpi	r24, 0x64	; 100
 76a:	81 f4       	brne	.+32     	; 0x78c <DIO_vTOGPORT+0x4c>
 76c:	0c c0       	rjmp	.+24     	; 0x786 <DIO_vTOGPORT+0x46>
	{
		case 'A':
		case 'a':
		{
			PORTA^=0xFF;
 76e:	8b b3       	in	r24, 0x1b	; 27
 770:	80 95       	com	r24
 772:	8b bb       	out	0x1b, r24	; 27
		}
		break;
 774:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB^=0xFF;
 776:	88 b3       	in	r24, 0x18	; 24
 778:	80 95       	com	r24
 77a:	88 bb       	out	0x18, r24	; 24
		}
		break;
 77c:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC^=0xFF;
 77e:	85 b3       	in	r24, 0x15	; 21
 780:	80 95       	com	r24
 782:	85 bb       	out	0x15, r24	; 21
		}
		break;
 784:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD^=0xFF;
 786:	82 b3       	in	r24, 0x12	; 18
 788:	80 95       	com	r24
 78a:	82 bb       	out	0x12, r24	; 18
 78c:	08 95       	ret

0000078e <DIO_u8ReadPort>:
		break;
	}
}
unsigned char DIO_u8ReadPort(unsigned char portname)
{
	switch(portname)
 78e:	84 34       	cpi	r24, 0x44	; 68
 790:	d9 f0       	breq	.+54     	; 0x7c8 <DIO_u8ReadPort+0x3a>
 792:	85 34       	cpi	r24, 0x45	; 69
 794:	38 f4       	brcc	.+14     	; 0x7a4 <DIO_u8ReadPort+0x16>
 796:	82 34       	cpi	r24, 0x42	; 66
 798:	99 f0       	breq	.+38     	; 0x7c0 <DIO_u8ReadPort+0x32>
 79a:	83 34       	cpi	r24, 0x43	; 67
 79c:	98 f4       	brcc	.+38     	; 0x7c4 <DIO_u8ReadPort+0x36>
 79e:	81 34       	cpi	r24, 0x41	; 65
 7a0:	a9 f4       	brne	.+42     	; 0x7cc <DIO_u8ReadPort+0x3e>
 7a2:	0c c0       	rjmp	.+24     	; 0x7bc <DIO_u8ReadPort+0x2e>
 7a4:	82 36       	cpi	r24, 0x62	; 98
 7a6:	61 f0       	breq	.+24     	; 0x7c0 <DIO_u8ReadPort+0x32>
 7a8:	83 36       	cpi	r24, 0x63	; 99
 7aa:	18 f4       	brcc	.+6      	; 0x7b2 <DIO_u8ReadPort+0x24>
 7ac:	81 36       	cpi	r24, 0x61	; 97
 7ae:	71 f4       	brne	.+28     	; 0x7cc <DIO_u8ReadPort+0x3e>
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <DIO_u8ReadPort+0x2e>
 7b2:	83 36       	cpi	r24, 0x63	; 99
 7b4:	39 f0       	breq	.+14     	; 0x7c4 <DIO_u8ReadPort+0x36>
 7b6:	84 36       	cpi	r24, 0x64	; 100
 7b8:	49 f4       	brne	.+18     	; 0x7cc <DIO_u8ReadPort+0x3e>
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <DIO_u8ReadPort+0x3a>
	{
		case 'A':
		case 'a':
		{
			return PINA;
 7bc:	89 b3       	in	r24, 0x19	; 25
 7be:	08 95       	ret
		break;
		
		case 'B':
		case 'b':
		{
			return PINB;
 7c0:	86 b3       	in	r24, 0x16	; 22
 7c2:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		{
			return PINC;
 7c4:	83 b3       	in	r24, 0x13	; 19
 7c6:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		{
			return PIND;
 7c8:	80 b3       	in	r24, 0x10	; 16
 7ca:	08 95       	ret
		}
		break;
	}
}
 7cc:	08 95       	ret

000007ce <DIO_vWriteHighNibble>:

void DIO_vWriteHighNibble(unsigned char portname, unsigned char val)
{
	val<<=4;
 7ce:	62 95       	swap	r22
 7d0:	60 7f       	andi	r22, 0xF0	; 240
	switch (portname)
 7d2:	84 34       	cpi	r24, 0x44	; 68
 7d4:	51 f1       	breq	.+84     	; 0x82a <DIO_vWriteHighNibble+0x5c>
 7d6:	85 34       	cpi	r24, 0x45	; 69
 7d8:	38 f4       	brcc	.+14     	; 0x7e8 <DIO_vWriteHighNibble+0x1a>
 7da:	82 34       	cpi	r24, 0x42	; 66
 7dc:	c1 f0       	breq	.+48     	; 0x80e <DIO_vWriteHighNibble+0x40>
 7de:	83 34       	cpi	r24, 0x43	; 67
 7e0:	e8 f4       	brcc	.+58     	; 0x81c <DIO_vWriteHighNibble+0x4e>
 7e2:	81 34       	cpi	r24, 0x41	; 65
 7e4:	41 f5       	brne	.+80     	; 0x836 <DIO_vWriteHighNibble+0x68>
 7e6:	0c c0       	rjmp	.+24     	; 0x800 <DIO_vWriteHighNibble+0x32>
 7e8:	82 36       	cpi	r24, 0x62	; 98
 7ea:	89 f0       	breq	.+34     	; 0x80e <DIO_vWriteHighNibble+0x40>
 7ec:	83 36       	cpi	r24, 0x63	; 99
 7ee:	18 f4       	brcc	.+6      	; 0x7f6 <DIO_vWriteHighNibble+0x28>
 7f0:	81 36       	cpi	r24, 0x61	; 97
 7f2:	09 f5       	brne	.+66     	; 0x836 <DIO_vWriteHighNibble+0x68>
 7f4:	05 c0       	rjmp	.+10     	; 0x800 <DIO_vWriteHighNibble+0x32>
 7f6:	83 36       	cpi	r24, 0x63	; 99
 7f8:	89 f0       	breq	.+34     	; 0x81c <DIO_vWriteHighNibble+0x4e>
 7fa:	84 36       	cpi	r24, 0x64	; 100
 7fc:	e1 f4       	brne	.+56     	; 0x836 <DIO_vWriteHighNibble+0x68>
 7fe:	15 c0       	rjmp	.+42     	; 0x82a <DIO_vWriteHighNibble+0x5c>
	{
		case 'A':
		case 'a':
		{
			PORTA &= 0x0F; //We must ensure high nibble pins are is deasserted
 800:	8b b3       	in	r24, 0x1b	; 27
 802:	8f 70       	andi	r24, 0x0F	; 15
 804:	8b bb       	out	0x1b, r24	; 27
			PORTA|=val; //we then write the 4 least sig bits on the high nibbole of the port.
 806:	8b b3       	in	r24, 0x1b	; 27
 808:	68 2b       	or	r22, r24
 80a:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 80c:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB &= 0x0F;
 80e:	88 b3       	in	r24, 0x18	; 24
 810:	8f 70       	andi	r24, 0x0F	; 15
 812:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 814:	88 b3       	in	r24, 0x18	; 24
 816:	68 2b       	or	r22, r24
 818:	68 bb       	out	0x18, r22	; 24
		}
		break;
 81a:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC &= 0x0F;
 81c:	85 b3       	in	r24, 0x15	; 21
 81e:	8f 70       	andi	r24, 0x0F	; 15
 820:	85 bb       	out	0x15, r24	; 21
			PORTC|=val;
 822:	85 b3       	in	r24, 0x15	; 21
 824:	68 2b       	or	r22, r24
 826:	65 bb       	out	0x15, r22	; 21
		}
		break;
 828:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD &= 0x0F;
 82a:	82 b3       	in	r24, 0x12	; 18
 82c:	8f 70       	andi	r24, 0x0F	; 15
 82e:	82 bb       	out	0x12, r24	; 18
			PORTD|=val;
 830:	82 b3       	in	r24, 0x12	; 18
 832:	68 2b       	or	r22, r24
 834:	62 bb       	out	0x12, r22	; 18
 836:	08 95       	ret

00000838 <DIO_vWriteLowNibble>:
	}
}

void DIO_vWriteLowNibble(unsigned char portname, unsigned char val)
{
	switch (portname)
 838:	84 34       	cpi	r24, 0x44	; 68
 83a:	51 f1       	breq	.+84     	; 0x890 <__stack+0x31>
 83c:	85 34       	cpi	r24, 0x45	; 69
 83e:	38 f4       	brcc	.+14     	; 0x84e <DIO_vWriteLowNibble+0x16>
 840:	82 34       	cpi	r24, 0x42	; 66
 842:	c1 f0       	breq	.+48     	; 0x874 <__stack+0x15>
 844:	83 34       	cpi	r24, 0x43	; 67
 846:	e8 f4       	brcc	.+58     	; 0x882 <__stack+0x23>
 848:	81 34       	cpi	r24, 0x41	; 65
 84a:	41 f5       	brne	.+80     	; 0x89c <__stack+0x3d>
 84c:	0c c0       	rjmp	.+24     	; 0x866 <__stack+0x7>
 84e:	82 36       	cpi	r24, 0x62	; 98
 850:	89 f0       	breq	.+34     	; 0x874 <__stack+0x15>
 852:	83 36       	cpi	r24, 0x63	; 99
 854:	18 f4       	brcc	.+6      	; 0x85c <DIO_vWriteLowNibble+0x24>
 856:	81 36       	cpi	r24, 0x61	; 97
 858:	09 f5       	brne	.+66     	; 0x89c <__stack+0x3d>
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__stack+0x7>
 85c:	83 36       	cpi	r24, 0x63	; 99
 85e:	89 f0       	breq	.+34     	; 0x882 <__stack+0x23>
 860:	84 36       	cpi	r24, 0x64	; 100
 862:	e1 f4       	brne	.+56     	; 0x89c <__stack+0x3d>
 864:	15 c0       	rjmp	.+42     	; 0x890 <__stack+0x31>
	{
		case 'A':
		case 'a':
		{
			PORTA &= 0xF0; //We must ensure low nibble pins are is deasserted because we will use or to write our data
 866:	8b b3       	in	r24, 0x1b	; 27
 868:	80 7f       	andi	r24, 0xF0	; 240
 86a:	8b bb       	out	0x1b, r24	; 27
			PORTA|=val; //we then write the 4 least sig bits on the high nibble of the port.
 86c:	8b b3       	in	r24, 0x1b	; 27
 86e:	68 2b       	or	r22, r24
 870:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 872:	08 95       	ret
		
		case 'B':
		case 'b':
		{
			PORTB &= 0xF0;
 874:	88 b3       	in	r24, 0x18	; 24
 876:	80 7f       	andi	r24, 0xF0	; 240
 878:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 87a:	88 b3       	in	r24, 0x18	; 24
 87c:	68 2b       	or	r22, r24
 87e:	68 bb       	out	0x18, r22	; 24
		}
		break;
 880:	08 95       	ret
		
		case 'C':
		case 'c':
		{
			PORTC &= 0xF0;
 882:	85 b3       	in	r24, 0x15	; 21
 884:	80 7f       	andi	r24, 0xF0	; 240
 886:	85 bb       	out	0x15, r24	; 21
			PORTC|=val;
 888:	85 b3       	in	r24, 0x15	; 21
 88a:	68 2b       	or	r22, r24
 88c:	65 bb       	out	0x15, r22	; 21
		}
		break;
 88e:	08 95       	ret
		
		case 'D':
		case 'd':
		{
			PORTD &= 0xF0;
 890:	82 b3       	in	r24, 0x12	; 18
 892:	80 7f       	andi	r24, 0xF0	; 240
 894:	82 bb       	out	0x12, r24	; 18
			PORTD|=val;
 896:	82 b3       	in	r24, 0x12	; 18
 898:	68 2b       	or	r22, r24
 89a:	62 bb       	out	0x12, r22	; 18
 89c:	08 95       	ret

0000089e <DIO_vEnablePullUp>:
	}
}

void DIO_vEnablePullUp(unsigned char portname, unsigned char pinnumber,unsigned char en)
{
	switch(portname)
 89e:	84 34       	cpi	r24, 0x44	; 68
 8a0:	09 f4       	brne	.+2      	; 0x8a4 <DIO_vEnablePullUp+0x6>
 8a2:	71 c0       	rjmp	.+226    	; 0x986 <DIO_vEnablePullUp+0xe8>
 8a4:	85 34       	cpi	r24, 0x45	; 69
 8a6:	48 f4       	brcc	.+18     	; 0x8ba <DIO_vEnablePullUp+0x1c>
 8a8:	82 34       	cpi	r24, 0x42	; 66
 8aa:	99 f1       	breq	.+102    	; 0x912 <DIO_vEnablePullUp+0x74>
 8ac:	83 34       	cpi	r24, 0x43	; 67
 8ae:	08 f0       	brcs	.+2      	; 0x8b2 <DIO_vEnablePullUp+0x14>
 8b0:	4d c0       	rjmp	.+154    	; 0x94c <DIO_vEnablePullUp+0xae>
 8b2:	81 34       	cpi	r24, 0x41	; 65
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <DIO_vEnablePullUp+0x1a>
 8b6:	83 c0       	rjmp	.+262    	; 0x9be <DIO_vEnablePullUp+0x120>
 8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <DIO_vEnablePullUp+0x3a>
 8ba:	82 36       	cpi	r24, 0x62	; 98
 8bc:	51 f1       	breq	.+84     	; 0x912 <DIO_vEnablePullUp+0x74>
 8be:	83 36       	cpi	r24, 0x63	; 99
 8c0:	20 f4       	brcc	.+8      	; 0x8ca <DIO_vEnablePullUp+0x2c>
 8c2:	81 36       	cpi	r24, 0x61	; 97
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <DIO_vEnablePullUp+0x2a>
 8c6:	7b c0       	rjmp	.+246    	; 0x9be <DIO_vEnablePullUp+0x120>
 8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <DIO_vEnablePullUp+0x3a>
 8ca:	83 36       	cpi	r24, 0x63	; 99
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <DIO_vEnablePullUp+0x32>
 8ce:	3e c0       	rjmp	.+124    	; 0x94c <DIO_vEnablePullUp+0xae>
 8d0:	84 36       	cpi	r24, 0x64	; 100
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <DIO_vEnablePullUp+0x38>
 8d4:	74 c0       	rjmp	.+232    	; 0x9be <DIO_vEnablePullUp+0x120>
 8d6:	57 c0       	rjmp	.+174    	; 0x986 <DIO_vEnablePullUp+0xe8>
	{
		case 'A':
		case 'a':
		{
			if(en==1) SET_BIT(PORTA,pinnumber);
 8d8:	41 30       	cpi	r20, 0x01	; 1
 8da:	69 f4       	brne	.+26     	; 0x8f6 <DIO_vEnablePullUp+0x58>
 8dc:	2b b3       	in	r18, 0x1b	; 27
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	ac 01       	movw	r20, r24
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_vEnablePullUp+0x4c>
 8e6:	44 0f       	add	r20, r20
 8e8:	55 1f       	adc	r21, r21
 8ea:	6a 95       	dec	r22
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <DIO_vEnablePullUp+0x48>
 8ee:	ba 01       	movw	r22, r20
 8f0:	62 2b       	or	r22, r18
 8f2:	6b bb       	out	0x1b, r22	; 27
 8f4:	08 95       	ret
			else CLR_BIT(PORTA,pinnumber);
 8f6:	2b b3       	in	r18, 0x1b	; 27
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	ac 01       	movw	r20, r24
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <DIO_vEnablePullUp+0x66>
 900:	44 0f       	add	r20, r20
 902:	55 1f       	adc	r21, r21
 904:	6a 95       	dec	r22
 906:	e2 f7       	brpl	.-8      	; 0x900 <DIO_vEnablePullUp+0x62>
 908:	ba 01       	movw	r22, r20
 90a:	60 95       	com	r22
 90c:	62 23       	and	r22, r18
 90e:	6b bb       	out	0x1b, r22	; 27
 910:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		{
			if(en==1) SET_BIT(PORTB,pinnumber);
 912:	41 30       	cpi	r20, 0x01	; 1
 914:	69 f4       	brne	.+26     	; 0x930 <DIO_vEnablePullUp+0x92>
 916:	28 b3       	in	r18, 0x18	; 24
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	ac 01       	movw	r20, r24
 91e:	02 c0       	rjmp	.+4      	; 0x924 <DIO_vEnablePullUp+0x86>
 920:	44 0f       	add	r20, r20
 922:	55 1f       	adc	r21, r21
 924:	6a 95       	dec	r22
 926:	e2 f7       	brpl	.-8      	; 0x920 <DIO_vEnablePullUp+0x82>
 928:	ba 01       	movw	r22, r20
 92a:	62 2b       	or	r22, r18
 92c:	68 bb       	out	0x18, r22	; 24
 92e:	08 95       	ret
			else CLR_BIT(PORTB,pinnumber);
 930:	28 b3       	in	r18, 0x18	; 24
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	ac 01       	movw	r20, r24
 938:	02 c0       	rjmp	.+4      	; 0x93e <DIO_vEnablePullUp+0xa0>
 93a:	44 0f       	add	r20, r20
 93c:	55 1f       	adc	r21, r21
 93e:	6a 95       	dec	r22
 940:	e2 f7       	brpl	.-8      	; 0x93a <DIO_vEnablePullUp+0x9c>
 942:	ba 01       	movw	r22, r20
 944:	60 95       	com	r22
 946:	62 23       	and	r22, r18
 948:	68 bb       	out	0x18, r22	; 24
 94a:	08 95       	ret
		
		
		case 'C':
		case 'c':
		{
			if(en==1) SET_BIT(PORTC,pinnumber);
 94c:	41 30       	cpi	r20, 0x01	; 1
 94e:	69 f4       	brne	.+26     	; 0x96a <DIO_vEnablePullUp+0xcc>
 950:	25 b3       	in	r18, 0x15	; 21
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	ac 01       	movw	r20, r24
 958:	02 c0       	rjmp	.+4      	; 0x95e <DIO_vEnablePullUp+0xc0>
 95a:	44 0f       	add	r20, r20
 95c:	55 1f       	adc	r21, r21
 95e:	6a 95       	dec	r22
 960:	e2 f7       	brpl	.-8      	; 0x95a <DIO_vEnablePullUp+0xbc>
 962:	ba 01       	movw	r22, r20
 964:	62 2b       	or	r22, r18
 966:	65 bb       	out	0x15, r22	; 21
 968:	08 95       	ret
			else CLR_BIT(PORTC,pinnumber);
 96a:	25 b3       	in	r18, 0x15	; 21
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	ac 01       	movw	r20, r24
 972:	02 c0       	rjmp	.+4      	; 0x978 <DIO_vEnablePullUp+0xda>
 974:	44 0f       	add	r20, r20
 976:	55 1f       	adc	r21, r21
 978:	6a 95       	dec	r22
 97a:	e2 f7       	brpl	.-8      	; 0x974 <DIO_vEnablePullUp+0xd6>
 97c:	ba 01       	movw	r22, r20
 97e:	60 95       	com	r22
 980:	62 23       	and	r22, r18
 982:	65 bb       	out	0x15, r22	; 21
 984:	08 95       	ret
		
		
		case 'D':
		case 'd':
		{
			if(en==1) SET_BIT(PORTD,pinnumber);
 986:	41 30       	cpi	r20, 0x01	; 1
 988:	69 f4       	brne	.+26     	; 0x9a4 <DIO_vEnablePullUp+0x106>
 98a:	22 b3       	in	r18, 0x12	; 18
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	ac 01       	movw	r20, r24
 992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_vEnablePullUp+0xfa>
 994:	44 0f       	add	r20, r20
 996:	55 1f       	adc	r21, r21
 998:	6a 95       	dec	r22
 99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_vEnablePullUp+0xf6>
 99c:	ba 01       	movw	r22, r20
 99e:	62 2b       	or	r22, r18
 9a0:	62 bb       	out	0x12, r22	; 18
 9a2:	08 95       	ret
			else CLR_BIT(PORTD,pinnumber);
 9a4:	22 b3       	in	r18, 0x12	; 18
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	ac 01       	movw	r20, r24
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_vEnablePullUp+0x114>
 9ae:	44 0f       	add	r20, r20
 9b0:	55 1f       	adc	r21, r21
 9b2:	6a 95       	dec	r22
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_vEnablePullUp+0x110>
 9b6:	ba 01       	movw	r22, r20
 9b8:	60 95       	com	r22
 9ba:	62 23       	and	r22, r18
 9bc:	62 bb       	out	0x12, r22	; 18
 9be:	08 95       	ret

000009c0 <keypad_vInit>:
#include "DIO.h"
#include "keypad_config.h"

void keypad_vInit(void)
{
	DIO_vSETPORTDir(KPORT,0x0F); //P7 to P4 are input
 9c0:	83 e4       	ldi	r24, 0x43	; 67
 9c2:	6f e0       	ldi	r22, 0x0F	; 15
 9c4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <DIO_vSETPORTDir>
	DIO_vEnablePullUp(KPORT,7,1);
 9c8:	83 e4       	ldi	r24, 0x43	; 67
 9ca:	67 e0       	ldi	r22, 0x07	; 7
 9cc:	41 e0       	ldi	r20, 0x01	; 1
 9ce:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_vEnablePullUp>
	DIO_vEnablePullUp(KPORT,6,1);
 9d2:	83 e4       	ldi	r24, 0x43	; 67
 9d4:	66 e0       	ldi	r22, 0x06	; 6
 9d6:	41 e0       	ldi	r20, 0x01	; 1
 9d8:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_vEnablePullUp>
	DIO_vEnablePullUp(KPORT,5,1);
 9dc:	83 e4       	ldi	r24, 0x43	; 67
 9de:	65 e0       	ldi	r22, 0x05	; 5
 9e0:	41 e0       	ldi	r20, 0x01	; 1
 9e2:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_vEnablePullUp>
	DIO_vEnablePullUp(KPORT,4,1);
 9e6:	83 e4       	ldi	r24, 0x43	; 67
 9e8:	64 e0       	ldi	r22, 0x04	; 4
 9ea:	41 e0       	ldi	r20, 0x01	; 1
 9ec:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_vEnablePullUp>
}
 9f0:	08 95       	ret

000009f2 <keypad_u8read>:

unsigned char keypad_u8read(void)
{
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	60 97       	sbiw	r28, 0x10	; 16
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	f8 94       	cli
 a04:	de bf       	out	0x3e, r29	; 62
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	cd bf       	out	0x3d, r28	; 61
	unsigned char ascii[4][4] = {
 a0a:	de 01       	movw	r26, r28
 a0c:	11 96       	adiw	r26, 0x01	; 1
 a0e:	e2 e9       	ldi	r30, 0x92	; 146
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 e1       	ldi	r24, 0x10	; 16
 a14:	01 90       	ld	r0, Z+
 a16:	0d 92       	st	X+, r0
 a18:	81 50       	subi	r24, 0x01	; 1
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <keypad_u8read+0x22>
								{'A','0','=','+'}
												};
	char row,col,x;
	char return_value=0xFF;
	
	for(row=0;row<=3;row++)
 a1c:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_vWriteLowNibble(KPORT,0xFF);
 a1e:	83 e4       	ldi	r24, 0x43	; 67
 a20:	6f ef       	ldi	r22, 0xFF	; 255
 a22:	0e 94 1c 04 	call	0x838	; 0x838 <DIO_vWriteLowNibble>
		DIO_vWrite(KPORT,row,0); //this is output, so i write 0 on the row i want to start reading from pins(0,1,2,3)==>rows(0.,1,2,3)
 a26:	83 e4       	ldi	r24, 0x43	; 67
 a28:	60 2f       	mov	r22, r16
 a2a:	40 e0       	ldi	r20, 0x00	; 0
 a2c:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
		for(col=0;col<=3;col++)
 a30:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vEnablePullUp(KPORT,6,1);
	DIO_vEnablePullUp(KPORT,5,1);
	DIO_vEnablePullUp(KPORT,4,1);
}

unsigned char keypad_u8read(void)
 a32:	61 2f       	mov	r22, r17
 a34:	6c 5f       	subi	r22, 0xFC	; 252
	{
		DIO_vWriteLowNibble(KPORT,0xFF);
		DIO_vWrite(KPORT,row,0); //this is output, so i write 0 on the row i want to start reading from pins(0,1,2,3)==>rows(0.,1,2,3)
		for(col=0;col<=3;col++)
		{
			x=DIO_u8read(KPORT,col+4);//this is input so i iterate on pins(4,5,6,7)===>col(0,1,2,3) to see if one is pushed 
 a36:	83 e4       	ldi	r24, 0x43	; 67
 a38:	0e 94 fe 02 	call	0x5fc	; 0x5fc <DIO_u8read>
			if(x==0)
 a3c:	88 23       	and	r24, r24
 a3e:	61 f4       	brne	.+24     	; 0xa58 <keypad_u8read+0x66>
			{
				return_value=ascii[row][col];
 a40:	e0 2f       	mov	r30, r16
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	ee 0f       	add	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	e1 0f       	add	r30, r17
 a4e:	f1 1d       	adc	r31, r1
 a50:	ec 0f       	add	r30, r28
 a52:	fd 1f       	adc	r31, r29
 a54:	81 81       	ldd	r24, Z+1	; 0x01
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <keypad_u8read+0x6e>
	
	for(row=0;row<=3;row++)
	{
		DIO_vWriteLowNibble(KPORT,0xFF);
		DIO_vWrite(KPORT,row,0); //this is output, so i write 0 on the row i want to start reading from pins(0,1,2,3)==>rows(0.,1,2,3)
		for(col=0;col<=3;col++)
 a58:	1f 5f       	subi	r17, 0xFF	; 255
 a5a:	14 30       	cpi	r17, 0x04	; 4
 a5c:	51 f7       	brne	.-44     	; 0xa32 <keypad_u8read+0x40>
 a5e:	0b c0       	rjmp	.+22     	; 0xa76 <keypad_u8read+0x84>
			}
		}
		if(x==0) break;
	}
	return return_value;
 a60:	60 96       	adiw	r28, 0x10	; 16
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	f8 94       	cli
 a66:	de bf       	out	0x3e, r29	; 62
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	cd bf       	out	0x3d, r28	; 61
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	1f 91       	pop	r17
 a72:	0f 91       	pop	r16
 a74:	08 95       	ret
								{'A','0','=','+'}
												};
	char row,col,x;
	char return_value=0xFF;
	
	for(row=0;row<=3;row++)
 a76:	0f 5f       	subi	r16, 0xFF	; 255
 a78:	04 30       	cpi	r16, 0x04	; 4
 a7a:	89 f6       	brne	.-94     	; 0xa1e <keypad_u8read+0x2c>
 a7c:	8f ef       	ldi	r24, 0xFF	; 255
 a7e:	f0 cf       	rjmp	.-32     	; 0xa60 <keypad_u8read+0x6e>

00000a80 <peekaboo>:
}


static void peekaboo(void)
{
	DIO_vWrite(CTRL_PORT,EN,1);
 a80:	82 e4       	ldi	r24, 0x42	; 66
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	70 e0       	ldi	r23, 0x00	; 0
 a88:	41 e0       	ldi	r20, 0x01	; 1
 a8a:	50 e0       	ldi	r21, 0x00	; 0
 a8c:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
 a90:	83 ef       	ldi	r24, 0xF3	; 243
 a92:	91 e0       	ldi	r25, 0x01	; 1
 a94:	01 97       	sbiw	r24, 0x01	; 1
 a96:	f1 f7       	brne	.-4      	; 0xa94 <peekaboo+0x14>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <peekaboo+0x1a>
 a9a:	00 00       	nop
	_delay_ms(2);
	DIO_vWrite(CTRL_PORT,EN,0);
 a9c:	82 e4       	ldi	r24, 0x42	; 66
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	60 e0       	ldi	r22, 0x00	; 0
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	40 e0       	ldi	r20, 0x00	; 0
 aa6:	50 e0       	ldi	r21, 0x00	; 0
 aa8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
 aac:	83 ef       	ldi	r24, 0xF3	; 243
 aae:	91 e0       	ldi	r25, 0x01	; 1
 ab0:	01 97       	sbiw	r24, 0x01	; 1
 ab2:	f1 f7       	brne	.-4      	; 0xab0 <peekaboo+0x30>
 ab4:	00 c0       	rjmp	.+0      	; 0xab6 <peekaboo+0x36>
 ab6:	00 00       	nop
	_delay_ms(2);
}
 ab8:	08 95       	ret

00000aba <LCD_vSend_cmd>:

void LCD_vSend_cmd(char cmd)
{
 aba:	cf 93       	push	r28
 abc:	c8 2f       	mov	r28, r24
	DIO_vWritePORT(LCD_PORT,cmd);
	DIO_vWrite(CTRL_PORT,RS,0);
	peekaboo();
	_delay_ms(1);
	#elif defined FOUR_BITS_MODE
	DIO_vWriteHighNibble(LCD_PORT,(cmd>>4));
 abe:	68 2f       	mov	r22, r24
 ac0:	62 95       	swap	r22
 ac2:	6f 70       	andi	r22, 0x0F	; 15
 ac4:	81 e4       	ldi	r24, 0x41	; 65
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	0e 94 e7 03 	call	0x7ce	; 0x7ce <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,0);
 ace:	82 e4       	ldi	r24, 0x42	; 66
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	62 e0       	ldi	r22, 0x02	; 2
 ad4:	70 e0       	ldi	r23, 0x00	; 0
 ad6:	40 e0       	ldi	r20, 0x00	; 0
 ad8:	50 e0       	ldi	r21, 0x00	; 0
 ada:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
	peekaboo();
 ade:	0e 94 40 05 	call	0xa80	; 0xa80 <peekaboo>
	DIO_vWriteHighNibble(LCD_PORT,cmd);
 ae2:	81 e4       	ldi	r24, 0x41	; 65
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	6c 2f       	mov	r22, r28
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	0e 94 e7 03 	call	0x7ce	; 0x7ce <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,0);
 aee:	82 e4       	ldi	r24, 0x42	; 66
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	62 e0       	ldi	r22, 0x02	; 2
 af4:	70 e0       	ldi	r23, 0x00	; 0
 af6:	40 e0       	ldi	r20, 0x00	; 0
 af8:	50 e0       	ldi	r21, 0x00	; 0
 afa:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
	peekaboo();
 afe:	0e 94 40 05 	call	0xa80	; 0xa80 <peekaboo>
 b02:	89 ef       	ldi	r24, 0xF9	; 249
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	01 97       	sbiw	r24, 0x01	; 1
 b08:	f1 f7       	brne	.-4      	; 0xb06 <LCD_vSend_cmd+0x4c>
 b0a:	00 c0       	rjmp	.+0      	; 0xb0c <LCD_vSend_cmd+0x52>
 b0c:	00 00       	nop
	#endif
	_delay_ms(1);
	
}
 b0e:	cf 91       	pop	r28
 b10:	08 95       	ret

00000b12 <LCD_vInit>:
	LCD_vSend_cmd(CLR_SCREEN);
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined FOUR_BITS_MODE
	DIO_vSetPinDir(LCD_PORT,4,1);
 b12:	81 e4       	ldi	r24, 0x41	; 65
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	64 e0       	ldi	r22, 0x04	; 4
 b18:	70 e0       	ldi	r23, 0x00	; 0
 b1a:	41 e0       	ldi	r20, 0x01	; 1
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT,5,1);
 b22:	81 e4       	ldi	r24, 0x41	; 65
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	65 e0       	ldi	r22, 0x05	; 5
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	41 e0       	ldi	r20, 0x01	; 1
 b2c:	50 e0       	ldi	r21, 0x00	; 0
 b2e:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT,6,1);
 b32:	81 e4       	ldi	r24, 0x41	; 65
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	66 e0       	ldi	r22, 0x06	; 6
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	41 e0       	ldi	r20, 0x01	; 1
 b3c:	50 e0       	ldi	r21, 0x00	; 0
 b3e:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_PORT,7,1);
 b42:	81 e4       	ldi	r24, 0x41	; 65
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	67 e0       	ldi	r22, 0x07	; 7
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	41 e0       	ldi	r20, 0x01	; 1
 b4c:	50 e0       	ldi	r21, 0x00	; 0
 b4e:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_vSetPinDir>
	DIO_vSetPinDir(CTRL_PORT,EN,1);
 b52:	82 e4       	ldi	r24, 0x42	; 66
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	60 e0       	ldi	r22, 0x00	; 0
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	41 e0       	ldi	r20, 0x01	; 1
 b5c:	50 e0       	ldi	r21, 0x00	; 0
 b5e:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_vSetPinDir>
	DIO_vSetPinDir(CTRL_PORT,RS,1);
 b62:	82 e4       	ldi	r24, 0x42	; 66
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	62 e0       	ldi	r22, 0x02	; 2
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	41 e0       	ldi	r20, 0x01	; 1
 b6c:	50 e0       	ldi	r21, 0x00	; 0
 b6e:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_vSetPinDir>
	DIO_vSetPinDir(CTRL_PORT,RW,1);
 b72:	82 e4       	ldi	r24, 0x42	; 66
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	61 e0       	ldi	r22, 0x01	; 1
 b78:	70 e0       	ldi	r23, 0x00	; 0
 b7a:	41 e0       	ldi	r20, 0x01	; 1
 b7c:	50 e0       	ldi	r21, 0x00	; 0
 b7e:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_vSetPinDir>
	DIO_vWrite(CTRL_PORT,RW,0);
 b82:	82 e4       	ldi	r24, 0x42	; 66
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	61 e0       	ldi	r22, 0x01	; 1
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	40 e0       	ldi	r20, 0x00	; 0
 b8c:	50 e0       	ldi	r21, 0x00	; 0
 b8e:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
	LCD_vSend_cmd(RETURN_HOME);
 b92:	82 e0       	ldi	r24, 0x02	; 2
 b94:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_vSend_cmd>
 b98:	83 ec       	ldi	r24, 0xC3	; 195
 b9a:	99 e0       	ldi	r25, 0x09	; 9
 b9c:	01 97       	sbiw	r24, 0x01	; 1
 b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCD_vInit+0x8a>
 ba0:	00 c0       	rjmp	.+0      	; 0xba2 <LCD_vInit+0x90>
 ba2:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS);
 ba4:	88 e2       	ldi	r24, 0x28	; 40
 ba6:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_vSend_cmd>
 baa:	89 ef       	ldi	r24, 0xF9	; 249
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	01 97       	sbiw	r24, 0x01	; 1
 bb0:	f1 f7       	brne	.-4      	; 0xbae <LCD_vInit+0x9c>
 bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <LCD_vInit+0xa2>
 bb4:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAY_ON);
 bb6:	8e e0       	ldi	r24, 0x0E	; 14
 bb8:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_vSend_cmd>
 bbc:	89 ef       	ldi	r24, 0xF9	; 249
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	01 97       	sbiw	r24, 0x01	; 1
 bc2:	f1 f7       	brne	.-4      	; 0xbc0 <LCD_vInit+0xae>
 bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <LCD_vInit+0xb4>
 bc6:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_vSend_cmd>
 bce:	83 ec       	ldi	r24, 0xC3	; 195
 bd0:	99 e0       	ldi	r25, 0x09	; 9
 bd2:	01 97       	sbiw	r24, 0x01	; 1
 bd4:	f1 f7       	brne	.-4      	; 0xbd2 <LCD_vInit+0xc0>
 bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <LCD_vInit+0xc6>
 bd8:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
 bda:	86 e0       	ldi	r24, 0x06	; 6
 bdc:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_vSend_cmd>
 be0:	89 ef       	ldi	r24, 0xF9	; 249
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	01 97       	sbiw	r24, 0x01	; 1
 be6:	f1 f7       	brne	.-4      	; 0xbe4 <LCD_vInit+0xd2>
 be8:	00 c0       	rjmp	.+0      	; 0xbea <LCD_vInit+0xd8>
 bea:	00 00       	nop
	_delay_ms(1);
	#endif
}
 bec:	08 95       	ret

00000bee <LCD_vSend_char>:
	_delay_ms(1);
	
}

void LCD_vSend_char(char chr)
{
 bee:	cf 93       	push	r28
 bf0:	c8 2f       	mov	r28, r24
	DIO_vWritePORT(LCD_PORT,chr);
	DIO_vWrite(CTRL_PORT,RS,1);
	peekaboo();
	_delay_ms(1);
	#elif defined FOUR_BITS_MODE
	DIO_vWriteHighNibble(LCD_PORT,(chr>>4));
 bf2:	68 2f       	mov	r22, r24
 bf4:	62 95       	swap	r22
 bf6:	6f 70       	andi	r22, 0x0F	; 15
 bf8:	81 e4       	ldi	r24, 0x41	; 65
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	0e 94 e7 03 	call	0x7ce	; 0x7ce <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,1);
 c02:	82 e4       	ldi	r24, 0x42	; 66
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	62 e0       	ldi	r22, 0x02	; 2
 c08:	70 e0       	ldi	r23, 0x00	; 0
 c0a:	41 e0       	ldi	r20, 0x01	; 1
 c0c:	50 e0       	ldi	r21, 0x00	; 0
 c0e:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
	peekaboo();
 c12:	0e 94 40 05 	call	0xa80	; 0xa80 <peekaboo>
	DIO_vWriteHighNibble(LCD_PORT,chr);
 c16:	81 e4       	ldi	r24, 0x41	; 65
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	6c 2f       	mov	r22, r28
 c1c:	70 e0       	ldi	r23, 0x00	; 0
 c1e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <DIO_vWriteHighNibble>
	DIO_vWrite(CTRL_PORT,RS,1);
 c22:	82 e4       	ldi	r24, 0x42	; 66
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	62 e0       	ldi	r22, 0x02	; 2
 c28:	70 e0       	ldi	r23, 0x00	; 0
 c2a:	41 e0       	ldi	r20, 0x01	; 1
 c2c:	50 e0       	ldi	r21, 0x00	; 0
 c2e:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vWrite>
	peekaboo();
 c32:	0e 94 40 05 	call	0xa80	; 0xa80 <peekaboo>
	#endif
}
 c36:	cf 91       	pop	r28
 c38:	08 95       	ret

00000c3a <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
 c3a:	cf 93       	push	r28
 c3c:	df 93       	push	r29
 c3e:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 c40:	88 81       	ld	r24, Y
 c42:	88 23       	and	r24, r24
 c44:	31 f0       	breq	.+12     	; 0xc52 <LCD_vSend_string+0x18>
	DIO_vWrite(CTRL_PORT,RS,1);
	peekaboo();
	#endif
}

void LCD_vSend_string(char *data)
 c46:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 c48:	0e 94 f7 05 	call	0xbee	; 0xbee <LCD_vSend_char>
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 c4c:	89 91       	ld	r24, Y+
 c4e:	88 23       	and	r24, r24
 c50:	d9 f7       	brne	.-10     	; 0xc48 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 c52:	df 91       	pop	r29
 c54:	cf 91       	pop	r28
 c56:	08 95       	ret

00000c58 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN);
 c58:	81 e0       	ldi	r24, 0x01	; 1
 c5a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_vSend_cmd>
 c5e:	83 ec       	ldi	r24, 0xC3	; 195
 c60:	99 e0       	ldi	r25, 0x09	; 9
 c62:	01 97       	sbiw	r24, 0x01	; 1
 c64:	f1 f7       	brne	.-4      	; 0xc62 <LCD_clearscreen+0xa>
 c66:	00 c0       	rjmp	.+0      	; 0xc68 <LCD_clearscreen+0x10>
 c68:	00 00       	nop
	_delay_ms(10);
}
 c6a:	08 95       	ret

00000c6c <LCD_movecursor>:

void LCD_movecursor(char row, char column)
{
	char pos=0;
	if(row==1)
 c6c:	81 30       	cpi	r24, 0x01	; 1
 c6e:	19 f4       	brne	.+6      	; 0xc76 <LCD_movecursor+0xa>
	{
		pos=(0x80)+column-1;
 c70:	86 2f       	mov	r24, r22
 c72:	81 58       	subi	r24, 0x81	; 129
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <LCD_movecursor+0x16>
	}
	else if(row==2)
 c76:	82 30       	cpi	r24, 0x02	; 2
 c78:	19 f4       	brne	.+6      	; 0xc80 <LCD_movecursor+0x14>
	{
		pos=(0xC0)+column-1;
 c7a:	86 2f       	mov	r24, r22
 c7c:	81 54       	subi	r24, 0x41	; 65
 c7e:	01 c0       	rjmp	.+2      	; 0xc82 <LCD_movecursor+0x16>
	}
	else
	{
		pos=0x80;
 c80:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_vSend_cmd(pos);
 c82:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_vSend_cmd>
 c86:	89 ef       	ldi	r24, 0xF9	; 249
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	01 97       	sbiw	r24, 0x01	; 1
 c8c:	f1 f7       	brne	.-4      	; 0xc8a <LCD_movecursor+0x1e>
 c8e:	00 c0       	rjmp	.+0      	; 0xc90 <LCD_movecursor+0x24>
 c90:	00 00       	nop
	_delay_ms(1);
}
 c92:	08 95       	ret

00000c94 <__divmodhi4>:
 c94:	97 fb       	bst	r25, 7
 c96:	09 2e       	mov	r0, r25
 c98:	07 26       	eor	r0, r23
 c9a:	0a d0       	rcall	.+20     	; 0xcb0 <__divmodhi4_neg1>
 c9c:	77 fd       	sbrc	r23, 7
 c9e:	04 d0       	rcall	.+8      	; 0xca8 <__divmodhi4_neg2>
 ca0:	0c d0       	rcall	.+24     	; 0xcba <__udivmodhi4>
 ca2:	06 d0       	rcall	.+12     	; 0xcb0 <__divmodhi4_neg1>
 ca4:	00 20       	and	r0, r0
 ca6:	1a f4       	brpl	.+6      	; 0xcae <__divmodhi4_exit>

00000ca8 <__divmodhi4_neg2>:
 ca8:	70 95       	com	r23
 caa:	61 95       	neg	r22
 cac:	7f 4f       	sbci	r23, 0xFF	; 255

00000cae <__divmodhi4_exit>:
 cae:	08 95       	ret

00000cb0 <__divmodhi4_neg1>:
 cb0:	f6 f7       	brtc	.-4      	; 0xcae <__divmodhi4_exit>
 cb2:	90 95       	com	r25
 cb4:	81 95       	neg	r24
 cb6:	9f 4f       	sbci	r25, 0xFF	; 255
 cb8:	08 95       	ret

00000cba <__udivmodhi4>:
 cba:	aa 1b       	sub	r26, r26
 cbc:	bb 1b       	sub	r27, r27
 cbe:	51 e1       	ldi	r21, 0x11	; 17
 cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <__udivmodhi4_ep>

00000cc2 <__udivmodhi4_loop>:
 cc2:	aa 1f       	adc	r26, r26
 cc4:	bb 1f       	adc	r27, r27
 cc6:	a6 17       	cp	r26, r22
 cc8:	b7 07       	cpc	r27, r23
 cca:	10 f0       	brcs	.+4      	; 0xcd0 <__udivmodhi4_ep>
 ccc:	a6 1b       	sub	r26, r22
 cce:	b7 0b       	sbc	r27, r23

00000cd0 <__udivmodhi4_ep>:
 cd0:	88 1f       	adc	r24, r24
 cd2:	99 1f       	adc	r25, r25
 cd4:	5a 95       	dec	r21
 cd6:	a9 f7       	brne	.-22     	; 0xcc2 <__udivmodhi4_loop>
 cd8:	80 95       	com	r24
 cda:	90 95       	com	r25
 cdc:	bc 01       	movw	r22, r24
 cde:	cd 01       	movw	r24, r26
 ce0:	08 95       	ret

00000ce2 <_exit>:
 ce2:	f8 94       	cli

00000ce4 <__stop_program>:
 ce4:	ff cf       	rjmp	.-2      	; 0xce4 <__stop_program>
